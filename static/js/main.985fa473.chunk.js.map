{"version":3,"sources":["AppHeader.js","slider/Slider.js","Calendar.js","Details.js","AppBody.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","window","location","href","_this","this","react_default","a","createElement","className","onClick","moveBack","index_es","icon","faChevronLeft","Component","Slider","listItems","map","delta","day","Date","props","currentDate","getTime","setDate","getDate","date","key","toString","onDateClick","dist_default","locale","format","Box","posed","div","visible","opacity","hidden","Calendar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isVisible","_this2","setState","setTimeout","onDateChange","_this3","faCalendarAlt","today","pose","src_slider_Slider","toCelcius","temperature","result","Math","round","Details","view","weather","status","data","obj","dt","tempMin","main","temp_min","tempMax","temp_max","getTemperature","url","src","alt","description","width","height","getIcon","AppBody","getWeather","currentDay","that","fetch","then","response","json","responseJson","console","log","weatherDataFound","weatherData","list","i","length","listItem","listItemDate","getDay","getMonth","getYear","push","src_Calendar_0","src_Details_0","App","src_AppHeader_0","src_AppBody_0","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.985fa473.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\nimport './AppHeader.css';\n\nclass AppHeader extends Component {\n  moveBack() {    \n    window.location.href = 'https://github.com/VadimCpp/flights';\n  }\n\n  render() {\n    return (\n      <header className=\"App-header\">\n        <h1 className=\"App-header_title\"> \n          Прогноз погоды\n        </h1>\n        <p className=\"App-header_subtitle\"> \n          с разбивкой по 3 часа, все как надо\n        </p>\n        <button \n          onClick={() => { this.moveBack()}}\n          className=\"App-header_back\"\n        > \n          <FontAwesomeIcon icon={faChevronLeft} />\n    \t  </button>\n      </header>\n    )\n  }\n}\n\n\nexport default AppHeader;\n","import React, { Component } from 'react';\nimport Moment from 'react-moment';\nimport 'moment/locale/ru';\nimport './Slider.css';\n\nclass Slider extends Component {\n  render() {    \n    const delta = [-2, -1, 0, 1, 2];\n    const dates = delta.map((delta) => {\n      let day = new Date(this.props.currentDate.getTime());\n      day.setDate(this.props.currentDate.getDate() + delta);      \n      return day;\n    });\n    const listItems = dates.map((date) =>\n      <li\n        key={date.toString()} \n        className='slider-item'\n        onClick={()=>{ this.props.onDateClick(date); }}\n      >\n        <p>\n          <Moment locale=\"ru\" format=\"dd\" className='slider-item_day'>\n            {date}\n          </Moment>\n        </p>\n        <p>\n          {date.getTime() === this.props.currentDate.getTime() ? (\n              <Moment locale=\"ru\" format=\"D\" className=\"selected-date calendar-header_date\">\n                {date}\n              </Moment>\n            ) : (\n              <Moment locale=\"ru\" format=\"D\" className=\"calendar-header_date\">\n                {date}\n              </Moment>\n            )\n          }\n        </p>\n        {date.getTime() === this.props.currentDate.getTime() &&\n            <div className=\"selection-circle\">\n            </div>\n        }\n        <p>\n          <br />\n        </p>      \n      </li>\n    );\n\n    return (\n      <ul className=\"slider\">\n        {listItems}\n      </ul>\n    )\n  }  \n}\n\nexport default Slider;\n","import React, { Component } from 'react';\nimport posed from 'react-pose';\nimport Moment from 'react-moment';\nimport 'moment/locale/ru';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCalendarAlt } from '@fortawesome/free-solid-svg-icons'\nimport Slider from './slider/Slider.js';\nimport './Calendar.css';\n\nconst Box = posed.div({\n  visible: { opacity: 1 },\n  hidden: { opacity: 0.1 }\n});    \n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: true,\n    };\n  }\n\n  onDateClick(date) {\n    this.setState({isVisible: false});\n    setTimeout(() => {\n      this.props.onDateChange(date);\n      this.setState({isVisible: true});\n    }, 100);\n  }\n\n  render() {\n    return (    \n      <div className=\"calendar\">\n        <div className=\"calendar-header\">\n          <FontAwesomeIcon icon={faCalendarAlt} />\n          <Moment \n            className=\"calendar-header_month\"\n            locale=\"ru\"\n            format=\"MMMM\"\n          >\n            {this.props.date}\n          </Moment>\n          <button            \n            onClick={() => { this.onDateClick(this.props.today)}}\n            className=\"calendar-header_todaylink\"\n          >\n            Сегодня\n          </button>\n        </div>\n        <Box className=\"box\" pose={this.state.isVisible ? 'visible' : 'hidden'}>\n          <div className=\"calendar-slider\">          \n            <Slider \n              currentDate={this.props.date}\n              onDateClick={(date) => {this.onDateClick(date)}}\n            />\n          </div>\n        </Box>\n      </div>\n    )\n  }\n}\n\nexport default Calendar;\n","import React, { Component } from 'react';\nimport Moment from 'react-moment';\nimport 'moment/locale/ru';\nimport './Details.css';\n\nclass Details extends Component {\n\n  render() {\n    const weather = this.props.weather;\n    let view;\n\n    if (weather.status === 'wait') {\n      view = (\n        <div className=\"details-item\">\n          <p className=\"details-item__secondary\">\n            Загружаем...\n          </p>\n        </div>\n      );\n    } else if (weather.status === 'done' && weather.data) {\n      let listItems = weather.data.map((obj) => (\n        <li\n          key = {obj.dt}\n          className = 'details-item'\n        >\n          <p className='details-item__headline'>\n            <span className='details-item__time'>\n              <Moment               \n                locale=\"ru\"\n                format=\"HH:mm\"\n              >\n                {new Date(obj.dt * 1000)}\n              </Moment>\n            </span>\n            {getTemperature(obj)}\n          </p>\n          <p className='details-item__secondary'>\n            {getIcon(obj)}\n            Ага-ага, это время дня <br />\n            И еще строка для красоты\n            \n          </p>\n        </li>\n      ));    \n\n      view = (\n        <ul className=\"details-slider\">\n          {listItems}\n        </ul>\n      );\n    } else {\n      view = (\n        <div className=\"details-item\">\n          <p className=\"details-item__secondary\">\n            Нет данных :(\n          </p>\n          <img \n            src=\"./img/notfound.png\" \n            alt=\"notfound\" \n            width=\"128\" \n            height=\"128\"\n          />\n        </div>\n      );      \n    }\n\n    return (\n      <div className=\"details\">\n\n        <p className=\"details-title\">\n          <span> \n            Погода&nbsp;\n          </span>\n          <Moment \n            className=\"details-title_date\"\n            locale=\"ru\"\n            format=\"DD MMMM\"\n          >\n            {this.props.date}\n          </Moment>\n        </p>\n        <p className=\"details-title\">\n          <span> \n            В Калининграде\n          </span>\n        </p>\n\n        <div>\n          {view}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction toCelcius(temperature) {\n  let result = Math.round(temperature - 273.15);\n  return result > 0 ? '+' + result + '' : '' + result + '';\n};\n\nfunction getTemperature(obj) {\n  const tempMin = toCelcius(obj.main.temp_min);\n  const tempMax = toCelcius(obj.main.temp_max);\n\n  if (tempMin !== tempMax) {\n    return (\n      <span className='details-item__cost'>\n        {tempMin}..{tempMax}\n      </span>\n    );\n  }\n\n  return (\n    <span className='details-item__cost'>\n      {tempMin}\n    </span>\n  );\n};\n\nfunction getIcon(obj) {\n  const base = 'http://openweathermap.org/img/w/';\n  const url = base + obj.weather[0].icon + '.png';\n\n  return (\n    <img \n      src={url} \n      alt={obj.weather[0].description} \n      className='details-item__icon'\n      width='35'\n      height='35'\n    />\n  );\n}\n\nexport default Details;\n","import React, { Component } from 'react';\nimport Calendar from './Calendar.js'\nimport Details from './Details.js'\nimport './AppBody.css';\n\nclass AppBody extends Component {\n  constructor(props) {\n    super(props);\n\n    const today = new Date();\n\n    this.state = {\n      currentDate: today,\n      today: today,\n      weather: {\n        status: 'wait',\n        data: null,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.getWeather(this.state.currentDate);\n  }\n\n  onDateChange(date) {\n    let currentDay = this.state.currentDate;\n\n    if (date.getDate() === currentDay.getDate())\n      return;\n\n    this.setState({ \n      currentDate: date,\n      weather: {\n        status: 'wait',\n        data: null,\n      },\n    });\n\n    this.getWeather(date);    \n  }\n\n  getWeather(date) {\n    // Я вообще против хранения всяких ключей в репозитории,\n    // но в данном случае оставлю ключ публичным.\n    // \n    // NOTE!\n    // Так же как в тестовых заданиях составляющий не предоставляет ключи,\n    // так же и среднестатистический клиент завязывает разные реги на \n    // программиста и потом страдает.\n    //\n    // http://api.openweathermap.org/\n    // Login: vadim.cpp at gmail.com \n    //\n    const apiKey = '1c399c23302f8d89aafc5eede93a843c';\n    const city = 'Kaliningrad,ru';\n    const url = 'http://api.openweathermap.org/data/2.5/forecast?q=' + city + '&appid=' + apiKey;\n    const that = this;\n\n    fetch(url)\n    .then(function(response) {      \n      return response.json();\n    })\n    .then(function(responseJson) {\n      console.log(responseJson);\n\n      let weatherDataFound = false;\n      let weatherData = [];\n\n      if (responseJson.list) {\n        for (let i = 0; i < responseJson.list.length; i++) {\n          const listItem = responseJson.list[i];          \n          const listItemDate = new Date(listItem.dt * 1000);\n\n          if (listItemDate.getDay() === date.getDay() &&\n              listItemDate.getMonth() === date.getMonth() &&\n              listItemDate.getYear() === date.getYear()) {\n            \n            weatherDataFound = true;\n            weatherData.push(listItem);\n          }          \n        }\n      }\n\n      if (weatherDataFound) {\n        that.setState({ \n          currentDate: date,\n          weather: {\n            status: 'done',\n            data: weatherData,\n          },\n        });\n      } else {\n        that.setState({ \n          currentDate: date,\n          weather: {\n            status: 'error',\n            data: null,\n          },\n        });      \n      }\n    });    \n  }\n\n  render() {\n    return (\n      <div className=\"App-body\">\n        <Calendar \n          date={this.state.currentDate}\n          onDateChange={(date) => {this.onDateChange(date)}}\n          today={this.state.today}\n      \t/>\n    \t\t<Details\n            date={this.state.currentDate}\n            weather={this.state.weather}\n  \t \t  />\n      </div>\n    )\n  }\n}\n\nexport default AppBody;\n","import React, { Component } from 'react';\nimport AppHeader from './AppHeader.js'\nimport AppBody from './AppBody.js'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (      \n      <div className=\"App\">\n        <AppHeader />\n        <AppBody />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}